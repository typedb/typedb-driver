#
# Copyright (C) 2022 Vaticle
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

version: 2.1

orbs:
  win: circleci/windows@5.0
  macos: circleci/macos@2.4.0

executors:
  linux-arm64-amazonlinux-2:
    docker:
      - image: amazonlinux:2
    resource_class: arm.large
    working_directory: ~/typedb-driver

  linux-x86_64-amazonlinux-2:
    docker:
      - image: amazonlinux:2
    resource_class: large
    working_directory: ~/typedb-driver

  linux-x86_64-ubuntu-2204:
    docker:
      - image: ubuntu:22.04
    resource_class: medium
    working_directory: ~/typedb-driver

  mac-arm64:
    macos:
      xcode: "13.4.1"
    resource_class: macos.m1.medium.gen1
    working_directory: ~/typedb-driver


commands:

  ######################
  # common setup steps #
  ######################

  install-bazel-yum:
    parameters:
      bazel-arch:
        type: string
    steps:
      - run: |
          amazon-linux-extras install python3.8 java-openjdk11 -y
          yum install -y git tar gcc gcc-c++ file lsof which procps
          ln -s /usr/bin/python3.8 /usr/bin/python3
          curl -OL "https://github.com/bazelbuild/bazelisk/releases/download/v1.17.0/bazelisk-linux-<<parameters.bazel-arch>>"
          mv "bazelisk-linux-<<parameters.bazel-arch>>" /usr/local/bin/bazel
          chmod a+x /usr/local/bin/bazel

  install-bazel-apt:
    parameters:
      bazel-arch:
        type: string
    steps:
      - run: |
          apt-get -y update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata
          apt-get -y install curl build-essential git python3 python3-pip default-jre lsof cmake file wget
          curl -OL "https://github.com/bazelbuild/bazelisk/releases/download/v1.17.0/bazelisk-linux-<<parameters.bazel-arch>>"
          mv "bazelisk-linux-<<parameters.bazel-arch>>" /usr/local/bin/bazel
          chmod a+x /usr/local/bin/bazel
  
  install-bazel-brew:
    parameters:
      bazel-arch:
        type: string
    steps:
      - run: |
          brew install python@3.8
          curl -OL "https://github.com/bazelbuild/bazelisk/releases/download/v1.17.0/bazelisk-darwin-<<parameters.bazel-arch>>"
          sudo mv "bazelisk-darwin-<<parameters.bazel-arch>>" /usr/local/bin/bazel
          chmod a+x /usr/local/bin/bazel

  ###########################
  # Python deployment steps #
  ###########################

  install-pip-requirements:
    steps:
      - run: |
          python3 -m pip install pip==21.3.1
          python3 -m pip install -r python/requirements_dev.txt

  deploy-pip-snapshot-unix:
    steps:
      - install-pip-requirements
      - run: |
          export DEPLOY_PIP_USERNAME=$REPO_VATICLE_USERNAME
          export DEPLOY_PIP_PASSWORD=$REPO_VATICLE_PASSWORD
          bazel run --jobs=8 --define version=$(git rev-parse HEAD) //python:deploy-pip38 -- snapshot
          bazel run --jobs=8 --define version=$(git rev-parse HEAD) //python:deploy-pip39 -- snapshot
          bazel run --jobs=8 --define version=$(git rev-parse HEAD) //python:deploy-pip310 -- snapshot
          bazel run --jobs=8 --define version=$(git rev-parse HEAD) //python:deploy-pip311 -- snapshot

  test-pip-snapshot-unix:
    steps:
      - install-pip-requirements
      - run: |
          tool/test/start-core-server.sh
          python3.8 -m pip install wheel 
          python3.8 -m pip install --extra-index-url https://repo.vaticle.com/repository/pypi-snapshot/simple typedb-driver==0.0.0+$(git rev-parse HEAD)
          sleep 3
          (cd python/tests/deployment/ && python3.8 -m unittest test && export TEST_SUCCESS=0 || export TEST_SUCCESS=1)
          tool/test/stop-core-server.sh
          exit $TEST_SUCCESS

  deploy-pip-release-unix:
    steps:
      - install-pip-requirements
      - run: |
          export DEPLOY_PIP_USERNAME=$REPO_PYPI_USERNAME
          export DEPLOY_PIP_PASSWORD=$REPO_PYPI_PASSWORD
          bazel run --jobs=8 --define version=$(cat VERSION) //python:deploy-pip38 --compilation_mode=opt -- release
          bazel run --jobs=8 --define version=$(cat VERSION) //python:deploy-pip39 --compilation_mode=opt -- release
          bazel run --jobs=8 --define version=$(cat VERSION) //python:deploy-pip310 --compilation_mode=opt -- release
          bazel run --jobs=8 --define version=$(cat VERSION) //python:deploy-pip311 --compilation_mode=opt -- release


  #########################
  # Java deployment steps #
  #########################

  install-maven-mac:
    steps:
      - run: brew install maven

  install-maven-linux:
    steps:
      - run: yum install -y maven

  deploy-maven-jni-snapshot-unix:
    steps:
      - run: |
          export DEPLOY_MAVEN_USERNAME=$REPO_VATICLE_USERNAME
          export DEPLOY_MAVEN_PASSWORD=$REPO_VATICLE_PASSWORD
          bazel run --jobs=8 --define version=$(git rev-parse HEAD) //java:deploy-maven-jni -- snapshot

  deploy-maven-snapshot-unix:
    steps:
      - run: |
          export DEPLOY_MAVEN_USERNAME=$REPO_VATICLE_USERNAME
          export DEPLOY_MAVEN_PASSWORD=$REPO_VATICLE_PASSWORD
          bazel run --jobs=8 --define version=$(git rev-parse HEAD) //java:deploy-maven -- snapshot

  test-maven-snapshot-unix:
    steps:
      - run: |
          tool/test/start-core-server.sh
          sed -i -e "s/DRIVER_JAVA_VERSION_MARKER/$CIRCLE_SHA1/g" java/test/deployment/pom.xml
          cat java/test/deployment/pom.xml
          (cd java/test/deployment && mvn test)
          tool/test/stop-core-server.sh

  deploy-maven-jni-release-unix:
    steps:
      - run: |
          export DEPLOY_MAVEN_USERNAME=$REPO_VATICLE_USERNAME
          export DEPLOY_MAVEN_PASSWORD=$REPO_VATICLE_PASSWORD
          bazel run --jobs=8 --define version=$(cat VERSION) //java:deploy-maven-jni --compilation_mode=opt -- release

  deploy-maven-release-unix:
    steps:
      - run: |
          export DEPLOY_MAVEN_USERNAME=$REPO_VATICLE_USERNAME
          export DEPLOY_MAVEN_PASSWORD=$REPO_VATICLE_PASSWORD
          bazel run --jobs=8 --define version=$(cat VERSION) //java:deploy-maven --compilation_mode=opt -- release

  ######################
  # C deployment steps #
  ######################

  deploy-clib-snapshot-unix:
    steps:
      - run: |
          export DEPLOY_ARTIFACT_USERNAME=$REPO_VATICLE_USERNAME
          export DEPLOY_ARTIFACT_PASSWORD=$REPO_VATICLE_PASSWORD
          bazel run --jobs=8 --define version=$(git rev-parse HEAD) //c:deploy-clib-driver --compilation_mode=opt -- snapshot

  test-clib-assembly-linux:
    parameters:
      target-arch:
        type: string
    steps:
      - run: |
          yum install -y cmake3 make
          bazel build --jobs=8 //c:assemble-linux-<<parameters.target-arch>>-targz
          export ASSEMBLY=typedb-driver-clib-linux-<<parameters.target-arch>>
          mkdir -p test_assembly_clib
          tar -xf bazel-bin/c/$ASSEMBLY.tar.gz --directory test_assembly_clib
          pushd test_assembly_clib
            cmake3 ../c/tests/assembly -DTYPEDB_ASSEMBLY=$(pwd)/$ASSEMBLY &&
            cmake3 --build . --config release
          popd
          tool/test/start-core-server.sh
          sleep 3
          pushd test_assembly_clib
            LD_LIBRARY_PATH=$ASSEMBLY/lib ./test_assembly && export TEST_SUCCESS=0 || export TEST_SUCCESS=1
          popd
          tool/test/stop-core-server.sh
          exit $TEST_SUCCESS

  test-clib-assembly-mac:
    parameters:
      target-arch:
        type: string
    steps:
      - run: |
          ulimit -n 100000
          bazel build //c:assemble-mac-<<parameters.target-arch>>-zip
          export ASSEMBLY=typedb-driver-clib-mac-<<parameters.target-arch>>
          mkdir -p test_assembly_clib
          tar -xf bazel-bin/c/$ASSEMBLY.zip --directory test_assembly_clib
          pushd test_assembly_clib
            cmake ../c/tests/assembly -DTYPEDB_ASSEMBLY=$(pwd)/$ASSEMBLY  -DCMAKE_OSX_ARCHITECTURES=<<parameters.target-arch>> &&
            cmake --build . --config release
          popd
          tool/test/start-core-server.sh
          sleep 3
          pushd test_assembly_clib
            DYLD_LIBRARY_PATH=$ASSEMBLY/lib ./test_assembly && export TEST_SUCCESS=0 || export TEST_SUCCESS=1
          popd
          tool/test/stop-core-server.sh
          exit $TEST_SUCCESS

  deploy-clib-release-unix:
    steps:
      - run: |
          export DEPLOY_ARTIFACT_USERNAME=$REPO_VATICLE_USERNAME
          export DEPLOY_ARTIFACT_PASSWORD=$REPO_VATICLE_PASSWORD
          bazel run --jobs=8 --define version=$(cat VERSION) //c:deploy-clib-driver --compilation_mode=opt -- release

  ########################
  # C++ deployment steps #
  ########################

  deploy-cpp-snapshot-unix:
    steps:
      - run: |
          export DEPLOY_ARTIFACT_USERNAME=$REPO_VATICLE_USERNAME
          export DEPLOY_ARTIFACT_PASSWORD=$REPO_VATICLE_PASSWORD
          bazel run --jobs=8 --define version=$(git rev-parse HEAD) //cpp:deploy-cpp-driver --compilation_mode=opt -- snapshot

  test-cpp-assembly-linux:
    parameters:
      target-arch:
        type: string
    steps:
      - run: |
          yum install -y cmake3 make
          bazel build --jobs=8 //cpp:assemble-linux-<<parameters.target-arch>>-targz
          export ASSEMBLY=typedb-driver-cpp-linux-<<parameters.target-arch>>
          mkdir -p test_assembly_cpp
          tar -xf bazel-bin/cpp/$ASSEMBLY.tar.gz --directory test_assembly_cpp
          pushd test_assembly_cpp
            cmake3 ../cpp/test/assembly -DTYPEDB_ASSEMBLY=$(pwd)/$ASSEMBLY &&
            cmake3 --build . --config release
          popd
          tool/test/start-core-server.sh
          sleep 3
          pushd test_assembly_cpp
            LD_LIBRARY_PATH=$ASSEMBLY/lib ./test_assembly && export TEST_SUCCESS=0 || export TEST_SUCCESS=1
          popd
          tool/test/stop-core-server.sh
          exit $TEST_SUCCESS

  test-cpp-assembly-mac:
    parameters:
      target-arch:
        type: string
    steps:
      - run: |
          ulimit -n 100000
          bazel build //cpp:assemble-mac-<<parameters.target-arch>>-zip
          export ASSEMBLY=typedb-driver-cpp-mac-<<parameters.target-arch>>
          mkdir -p test_assembly_cpp
          tar -xf bazel-bin/cpp/$ASSEMBLY.zip --directory test_assembly_cpp
          pushd test_assembly_cpp
            cmake ../cpp/test/assembly -DTYPEDB_ASSEMBLY=$(pwd)/$ASSEMBLY -DCMAKE_OSX_ARCHITECTURES=<<parameters.target-arch>> &&
            cmake --build . --config release
          popd
          tool/test/start-core-server.sh
          sleep 3
          pushd test_assembly_cpp
            DYLD_LIBRARY_PATH=$ASSEMBLY/lib ./test_assembly && export TEST_SUCCESS=0 || export TEST_SUCCESS=1
          popd
          tool/test/stop-core-server.sh
          exit $TEST_SUCCESS

  deploy-cpp-release-unix:
    steps:
      - run: |
          export DEPLOY_ARTIFACT_USERNAME=$REPO_VATICLE_USERNAME
          export DEPLOY_ARTIFACT_PASSWORD=$REPO_VATICLE_PASSWORD
          bazel run --jobs=8 --define version=$(cat VERSION) //cpp:deploy-cpp-driver --compilation_mode=opt -- release

  #########################
  # Rust deployment steps #
  #########################

  deploy-crate-snapshot-unix:
    steps:
      - run: |
          export DEPLOY_CRATE_TOKEN=$REPO_VATICLE_CRATES_TOKEN
          bazel run --jobs=8 --define version=$(git rev-parse HEAD) //rust:deploy_crate -- snapshot

  deploy-crate-release-unix:
    steps:
      - run: |
          export DEPLOY_CRATE_TOKEN=$REPO_CRATES_TOKEN
          bazel run --jobs=8 --define version=$(cat VERSION) //rust:deploy_crate --compilation_mode=opt -- release

  #########################
  # Node deployment steps #
  #########################

  deploy-npm-snapshot-unix:
    steps:
      - run: |
          export DEPLOY_NPM_USERNAME=$REPO_VATICLE_USERNAME
          export DEPLOY_NPM_PASSWORD=$REPO_VATICLE_PASSWORD
          bazel run --define version=$(git rev-parse HEAD) //nodejs:deploy-npm -- snapshot

  test-npm-snapshot-unix:
    steps:
      - run: |
          tool/test/start-core-server.sh
          cd nodejs/test/deployment/
          npm install https://repo.vaticle.com/repository/npm-snapshot-group/typedb-driver/-/typedb-driver-0.0.0-$FACTORY_COMMIT.tgz
          sudo -H npm install jest --global
          jest --detectOpenHandles application.test.js && export TEST_SUCCESS=0 || export TEST_SUCCESS=1
          cd -
          tool/test/stop-core-server.sh
          exit $TEST_SUCCESS

  deploy-npm-release-unix:
    steps:
      - run: |
          wget -q -O - https://cli-assets.heroku.com/apt/release.key | apt-key add -
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
          apt update -y
          apt install -y expect npm
          export DEPLOY_NPM_TOKEN=$REPO_NPM_TOKEN
          bazel run --jobs=8 --define version=$(cat VERSION) //nodejs:deploy-npm --compilation_mode=opt -- release

jobs:

  #################
  # Snapshot jobs #
  #################

  deploy-snapshot-linux-arm64:
    executor: linux-arm64-amazonlinux-2
    steps:
      - checkout
      - install-bazel-yum:
          bazel-arch: arm64

      - deploy-pip-snapshot-unix

      - deploy-maven-jni-snapshot-unix

      - deploy-clib-snapshot-unix
      - test-clib-assembly-linux:
          target-arch: arm64

      - deploy-cpp-snapshot-unix
      - test-cpp-assembly-linux:
          target-arch: arm64

  deploy-snapshot-linux-x86_64:
    executor: linux-x86_64-amazonlinux-2
    steps:
      - checkout
      - install-bazel-yum:
          bazel-arch: amd64

      - deploy-pip-snapshot-unix

      - deploy-maven-jni-snapshot-unix

      - deploy-clib-snapshot-unix
      - test-clib-assembly-linux:
          target-arch: x86_64

      - deploy-cpp-snapshot-unix
      - test-cpp-assembly-linux:
          target-arch: x86_64

  deploy-snapshot-mac-arm64:
    executor: mac-arm64
    steps:
      - checkout
      - install-bazel-brew:
          bazel-arch: arm64

      - deploy-pip-snapshot-unix

      - deploy-maven-jni-snapshot-unix

      - run: brew install cmake

      - deploy-clib-snapshot-unix
      - test-clib-assembly-mac:
          target-arch: arm64

      - deploy-cpp-snapshot-unix
      - test-cpp-assembly-mac:
          target-arch: arm64

  deploy-snapshot-mac-x86_64:
    executor: mac-arm64
    steps:
      - macos/install-rosetta
      - checkout
      - install-bazel-brew:
          bazel-arch: amd64

      - deploy-pip-snapshot-unix

      - deploy-maven-jni-snapshot-unix

      - run: brew install cmake

      - deploy-clib-snapshot-unix
      - test-clib-assembly-mac:
          target-arch: x86_64

      - deploy-cpp-snapshot-unix
      - test-cpp-assembly-mac:
          target-arch: x86_64

  deploy-snapshot-windows-x86_64:
    executor:
      name: win/default
      size: xlarge
      shell: cmd.exe
    working_directory: ~/typedb-driver
    steps:
      - checkout
      - run: .circleci\windows\prepare.bat

      - run: .circleci\windows\python\deploy_snapshot.bat

      - run: .circleci\windows\java\deploy_snapshot.bat

      - run: .circleci\windows\clib\deploy_snapshot.bat
      - run: .circleci\windows\clib\test_assembly.bat

      - run: .circleci\windows\cpp\deploy_snapshot.bat
      - run: .circleci\windows\cpp\test_assembly.bat

  deploy-snapshot-any:
    executor: linux-x86_64-amazonlinux-2
    steps:
      - checkout
      - install-bazel-yum:
          bazel-arch: amd64
      - deploy-crate-snapshot-unix
      - deploy-maven-snapshot-unix
      - deploy-npm-snapshot-unix


  test-snapshot-linux-arm64:
    executor: linux-arm64-amazonlinux-2
    steps:
      - checkout
      - install-bazel-yum:
          bazel-arch: arm64
      - test-pip-snapshot-unix
      - install-maven-linux
      - test-maven-snapshot-unix

  test-snapshot-linux-x86_64:
    executor: linux-x86_64-amazonlinux-2
    steps:
      - checkout
      - install-bazel-yum:
          bazel-arch: amd64
      - test-pip-snapshot-unix
      - install-maven-linux
      - test-maven-snapshot-unix

  test-snapshot-mac-arm64:
    executor: mac-arm64
    steps:
      - checkout
      - install-bazel-brew:
          bazel-arch: arm64
      - test-pip-snapshot-unix
      - install-maven-mac
      - test-maven-snapshot-unix

  test-snapshot-mac-x86_64:
    executor: mac-arm64
    steps:
      - macos/install-rosetta
      - checkout
      - install-bazel-brew:
          bazel-arch: amd64
      - test-pip-snapshot-unix
      - install-maven-mac
      - test-maven-snapshot-unix

  test-snapshot-windows-x86_64:
    executor:
      name: win/default
      size: xlarge
      shell: cmd.exe
    working_directory: ~/typedb-driver
    steps:
      - checkout
      - run: .circleci\windows\prepare.bat
      - run: .circleci\windows\python\test_deploy_snapshot.bat
      - run: .circleci\windows\java\test_deploy_snapshot.bat

  test-snapshot-any:
    executor: linux-x86_64-amazonlinux-2
    steps:
      - checkout
      - install-bazel-yum:
          bazel-arch: amd64
      - test-npm-snapshot-unix

  ################
  # Release jobs #
  ################

  deploy-release-linux-arm64:
    executor: linux-arm64-amazonlinux-2
    steps:
      - checkout
      - install-bazel-yum:
          bazel-arch: arm64
      - deploy-pip-release-unix
      - deploy-maven-jni-release-unix
      - deploy-clib-release-unix
      - deploy-cpp-release-unix
      - run: |
          mkdir -p ~/dist
          for f in bazel-bin/python/*.whl; do
              fname=$(basename $f)
              base=${fname%.*}
              pyversion=${base#typedb-driver}
              cp $f ~/dist/typedb_driver-py${pyversion}-none-manylinux_2_17_aarch64.whl
          done
          cp bazel-bin/java/com.vaticle.typedb-typedb-driver-jni-linux-arm64.jar ~/dist/typedb-driver-jni-linux-arm64.jar
          cp bazel-bin/c/typedb-driver-clib-linux-arm64.tar.gz ~/dist
          cp bazel-bin/cpp/typedb-driver-cpp-linux-arm64.tar.gz ~/dist
      - persist_to_workspace:
          root: ~/dist
          paths: ["./*"]

  deploy-release-linux-x86_64:
    executor: linux-x86_64-amazonlinux-2
    steps:
      - checkout
      - install-bazel-yum:
          bazel-arch: amd64
      - deploy-pip-release-unix
      - deploy-maven-jni-release-unix
      - deploy-clib-release-unix
      - deploy-cpp-release-unix
      - run: |
          mkdir -p ~/dist
          for f in bazel-bin/python/*.whl; do
              fname=$(basename $f)
              base=${fname%.*}
              pyversion=${base#typedb-driver}
              cp $f ~/dist/typedb_driver-py${pyversion}-none-manylinux_2_17_x86_64.whl
          done
          cp bazel-bin/java/com.vaticle.typedb-typedb-driver-jni-linux-x86_64.jar ~/dist/typedb-driver-jni-linux-x86_64.jar
          cp bazel-bin/c/typedb-driver-clib-linux-x86_64.tar.gz ~/dist
          cp bazel-bin/cpp/typedb-driver-cpp-linux-x86_64.tar.gz ~/dist
      - persist_to_workspace:
          root: ~/dist
          paths: ["./*"]


  deploy-release-mac-arm64:
    executor: mac-arm64
    steps:
      - checkout
      - install-bazel-brew:
          bazel-arch: arm64
      - deploy-pip-release-unix
      - deploy-maven-jni-release-unix
      - deploy-clib-release-unix
      - deploy-cpp-release-unix
      - run: |
          mkdir -p ~/dist
          for f in bazel-bin/python/*.whl; do
              fname=$(basename $f)
              base=${fname%.*}
              pyversion=${base#typedb-driver}
              cp $f ~/dist/typedb_driver-py${pyversion}-none-macosx_11_0_arm64.whl
          done
          cp bazel-bin/java/com.vaticle.typedb-typedb-driver-jni-macosx-arm64.jar ~/dist/typedb-driver-jni-macosx-arm64.jar
          cp bazel-bin/c/typedb-driver-clib-mac-arm64.tar.gz ~/dist
          cp bazel-bin/cpp/typedb-driver-cpp-mac-arm64.tar.gz ~/dist
      - persist_to_workspace:
          root: ~/dist
          paths: ["./*"]


  deploy-release-mac-x86_64:
    executor: mac-arm64
    steps:
      - checkout
      - macos/install-rosetta
      - install-bazel-brew:
          bazel-arch: amd64
      - deploy-pip-release-unix
      - deploy-maven-jni-release-unix
      - deploy-clib-release-unix
      - deploy-cpp-release-unix
      - run: |
          mkdir -p ~/dist
          for f in bazel-bin/python/*.whl; do
              fname=$(basename $f)
              base=${fname%.*}
              pyversion=${base#typedb-driver}
              cp $f ~/dist/typedb_driver-py${pyversion}-none-macosx_11_0_x86_64.whl
          done
          cp bazel-bin/java/com.vaticle.typedb-typedb-driver-jni-macosx-x86_64.jar ~/dist/typedb-driver-jni-macosx-x86_64.jar
          cp bazel-bin/c/typedb-driver-clib-mac-x86_64.tar.gz ~/dist
          cp bazel-bin/cpp/typedb-driver-cpp-mac-x86_64.tar.gz ~/dist
      - persist_to_workspace:
          root: ~/dist
          paths: ["./*"]

  deploy-release-windows-x86_64:
    executor:
      name: win/default
      size: xlarge
      shell: cmd.exe
    working_directory: ~/typedb-driver
    steps:
      - checkout
      - run: .circleci\windows\prepare.bat
      - run: .circleci\windows\python\deploy_release.bat
      - run: .circleci\windows\java\deploy_release.bat
      - run: .circleci\windows\clib\deploy_release.bat
      - run: .circleci\windows\cpp\deploy_release.bat
      - persist_to_workspace:
          root: dist
          paths: ["./*"]

  deploy-release-any:
    executor: linux-x86_64-ubuntu-2204
    steps:
      - checkout
      - install-bazel-apt:
          bazel-arch: amd64
      - deploy-crate-release-unix
      - deploy-maven-release-unix
      - deploy-npm-release-unix
      - run: |
          mkdir -p ~/dist
          cp bazel-bin/rust/assemble_crate.crate ~/dist/typedb-driver.crate
          cp bazel-bin/java/libdriver-java.jar ~/dist/typedb-driver.jar
          cp bazel-bin/nodejs/assemble-npm.tar.gz ~/dist/typedb-driver-node.tar.gz
      - persist_to_workspace:
          root: ~/dist
          paths: ["./*"]

  deploy-github:
    executor: linux-x86_64-ubuntu-2204
    steps:
      - attach_workspace:
          at: ~/dist
      - checkout
      - install-bazel-apt:
          bazel-arch: amd64
      - run:
          name: "Publish Release on GitHub"
          command: |
            wget https://github.com/tcnksm/ghr/releases/download/v0.12.1/ghr_v0.12.1_linux_amd64.tar.gz
            tar -xf ghr_v0.12.1_linux_amd64.tar.gz
            ghr_v0.12.1_linux_amd64/ghr -t ${REPO_GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} \
              -r ${CIRCLE_PROJECT_REPONAME} -n "TypeDB Driver $(cat VERSION)" -b "$(cat ./RELEASE_NOTES_LATEST.md)" \
              -c ${CIRCLE_SHA1} -delete $(cat VERSION) ~/dist/

  release-cleanup:
    executor: linux-x86_64-ubuntu-2204
    steps:
      - checkout
      - run: |
          apt update -y
          apt install -y git
          git push --delete https://$REPO_GITHUB_TOKEN@github.com/vaticle/typedb-driver.git $CIRCLE_BRANCH


workflows:
  typedb-driver-snapshot:
    jobs:
      - deploy-snapshot-linux-arm64:
          filters:
            branches:
              only: [master, development]
      - deploy-snapshot-linux-x86_64:
          filters:
            branches:
              only: [master, development]
      - deploy-snapshot-mac-arm64:
          filters:
            branches:
              only: [master, development]
      - deploy-snapshot-mac-x86_64:
          filters:
            branches:
              only: [master, development]
      - deploy-snapshot-windows-x86_64:
          filters:
            branches:
              only: [master, development]

      - deploy-snapshot-any:
          filters:
            branches:
              only: [master, development]
          requires:
            - deploy-snapshot-linux-arm64
            - deploy-snapshot-linux-x86_64
            - deploy-snapshot-mac-arm64
            - deploy-snapshot-mac-x86_64
            - deploy-snapshot-windows-x86_64

      - test-snapshot-linux-arm64:
          filters:
            branches:
              only: [master, development]
          requires:
            - deploy-snapshot-linux-arm64
            - deploy-snapshot-any
      - test-snapshot-linux-x86_64:
          filters:
            branches:
              only: [master, development]
          requires:
            - deploy-snapshot-linux-x86_64
            - deploy-snapshot-any
      - test-snapshot-mac-arm64:
          filters:
            branches:
              only: [master, development]
          requires:
            - deploy-snapshot-mac-arm64
            - deploy-snapshot-any
      - test-snapshot-mac-x86_64:
          filters:
            branches:
              only: [master, development]
          requires:
            - deploy-snapshot-mac-x86_64
            - deploy-snapshot-any
      - test-snapshot-windows-x86_64:
          filters:
            branches:
              only: [master, development]
          requires:
            - deploy-snapshot-windows-x86_64
            - deploy-snapshot-any

      - test-snapshot-any:
          filters:
            branches:
              only: [master, development]
          requires:
            - deploy-snapshot-any

  release:
    jobs:
      - deploy-release-linux-arm64:
          filters:
            branches:
              only: [release]
      - deploy-release-linux-x86_64:
          filters:
            branches:
              only: [release]
      - deploy-release-mac-arm64:
          filters:
            branches:
              only: [release]
      - deploy-release-mac-x86_64:
          filters:
            branches:
              only: [release]
      - deploy-release-windows-x86_64:
          filters:
            branches:
              only: [release]

      - deploy-release-any:
          filters:
            branches:
              only: [release]
          requires:
            - deploy-release-linux-arm64
            - deploy-release-linux-x86_64
            - deploy-release-mac-arm64
            - deploy-release-mac-x86_64
            - deploy-release-windows-x86_64

      - deploy-github:
          filters:
            branches:
              only: [release]
          requires:
            - deploy-release-mac-arm64
            - deploy-release-mac-x86_64
            - deploy-release-linux-arm64
            - deploy-release-linux-x86_64
            - deploy-release-windows-x86_64
            - deploy-release-any

      - release-cleanup:
          filters:
            branches:
              only: [release]
          requires:
            - deploy-github
