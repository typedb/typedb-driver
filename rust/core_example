// This file is automatically generated.
// It is not intended for manual editing.
use typedb_driver::{answer::QueryAnswer, TransactionType, TypeDBDriver};

fn typedb_example() {
    async_std::task::block_on(async {
        // Connection has been replaced with Driver:
        let driver = TypeDBDriver::new_core("127.0.0.1:1729").await.unwrap();

        if driver.databases().contains("db-name").await.unwrap() {
            let db = driver.databases().get("db-name").await.unwrap();
            db.delete().await.unwrap();
        }

        driver.databases().create("db-name").await.unwrap();

        // Sessions have been removed. Now there are Read, Write, and Schema transactions only
        let transaction = driver.transaction("db-name", TransactionType::Schema).await.unwrap();

        // All queries just use a simple .query() API
        let result = transaction.query("define entity person, owns age; attribute age, value long;").await;
        let answer = result.unwrap(); // result could contain an error returned by the server
                                      // Define queries return OK answers

        transaction.commit().await.unwrap();

        let transaction = driver.transaction("db-name", TransactionType::Write).await.unwrap();

        let result = transaction.query("insert $x isa person, has age 10;").await;
        let answer = result.unwrap(); // result could contain an error returned by the server

        let mut rows_stream = answer.into_rows();
        while let Some(Ok(row)) = rows_stream.next().await {
            println!("{:?}", &row);
            println!("{:?}", row.get("x"));
        }

        //
        //
        // let driver = common::new_core_driver().await.unwrap();
        // driver.databases().create("testing-db").await.unwrap();
        //
        // let db = driver.databases().get("testing-db").await.unwrap();
        // db.delete().await.unwrap();
        // common::create_test_database_with_schema(&driver, r#"
        //     define
        //         entity person,
        //             owns age,
        //             owns name @card(0..);
        //         attribute age,
        //             value long;
        //         attribute name, value string;
        //         attribute bday, value datetime;
        // "#).await.unwrap();
        //
        //
        // let transaction = driver.transaction(common::TEST_DATABASE, Read).await.unwrap();
        // let rows: Vec<ConceptRow> = transaction.query("match entity $x;").await.unwrap().into_rows().try_collect().await.unwrap();
        // assert_eq!(rows.len(), 1);
        //
        // let transaction_2 = driver.transaction(common::TEST_DATABASE, Read).await.unwrap();
        // let rows_2: Vec<ConceptRow> = transaction_2.query("match entity $x;").await.unwrap().into_rows().try_collect().await.unwrap();
        // assert_eq!(rows_2.len(), 1);
        //
        // let transaction_3 = driver.transaction(common::TEST_DATABASE, Read).await.unwrap();
        // let rows_3: Vec<ConceptRow> = transaction_3.query("match entity $x;").await.unwrap().into_rows().try_collect().await.unwrap();
        // assert_eq!(rows_2.len(), 1);
        //
        // let transaction = driver.transaction(common::TEST_DATABASE, Write).await.unwrap();
        // let answers = transaction.query("insert $z isa person, has age 10; $x isa person, has age 20;").await.unwrap();
        // let rows: Vec<_> = answers.into_rows().collect().await;
        // assert_eq!(rows.len(), 1);
        // transaction.commit().await.unwrap();
        //
        // let transaction = driver.transaction(common::TEST_DATABASE, Read).await.unwrap();
        // let answers = transaction.query("match $x isa person, has age $a;").await.unwrap();
        // let mut iter = answers.into_rows();
        //
        // let mut rows_count = 0;
        // while let Some(row) = iter.next().await {
        //     println!("{}", row.unwrap());
        //     rows_count += 1;
        // }
        // assert_eq!(rows_count, 2);
        //
        // let answers = transaction.query("match $x isa person, has age 10;").await.unwrap();
        // let rows: Vec<ConceptRow> = answers.into_rows().try_collect().await.unwrap();
        // dbg!(rows);
    })
    // .unwrap();
}
